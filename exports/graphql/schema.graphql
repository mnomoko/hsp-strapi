type About {
  texte: String
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input AboutInput {
  texte: String
}

type Client {
  texte: String
  type: ENUM_CLIENT_TYPE
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input ClientInput {
  texte: String
  type: ENUM_CLIENT_TYPE
}

input createAboutInput {
  data: AboutInput
}

type createAboutPayload {
  about: About
}

input createClientInput {
  data: ClientInput
}

type createClientPayload {
  client: Client
}

input createMissionInput {
  data: MissionInput
}

type createMissionPayload {
  mission: Mission
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createServiceInput {
  data: ServiceInput
}

type createServicePayload {
  service: Service
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteAboutInput {
  where: InputID
}

type deleteAboutPayload {
  about: About
}

input deleteClientInput {
  where: InputID
}

type deleteClientPayload {
  client: Client
}

input deleteMissionInput {
  where: InputID
}

type deleteMissionPayload {
  mission: Mission
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteServiceInput {
  where: InputID
}

type deleteServicePayload {
  service: Service
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editAboutInput {
  texte: String
}

input editClientInput {
  texte: String
  type: ENUM_CLIENT_TYPE
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editMissionInput {
  title: String
  content: String
  picture: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editServiceInput {
  title: String
  description: String
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

enum ENUM_CLIENT_TYPE {
  association
  collectivite
  organisme
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

type Mission {
  title: String
  content: String
  picture: UploadFile
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input MissionInput {
  title: String
  content: String
  picture: ID
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | About | createAboutPayload | updateAboutPayload | deleteAboutPayload | Client | createClientPayload | updateClientPayload | deleteClientPayload | Mission | createMissionPayload | updateMissionPayload | deleteMissionPayload | Service | createServicePayload | updateServicePayload | deleteServicePayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createAbout(input: createAboutInput): createAboutPayload
  updateAbout(input: updateAboutInput): updateAboutPayload
  deleteAbout(input: deleteAboutInput): deleteAboutPayload
  createClient(input: createClientInput): createClientPayload
  updateClient(input: updateClientInput): updateClientPayload
  deleteClient(input: deleteClientInput): deleteClientPayload
  createMission(input: createMissionInput): createMissionPayload
  updateMission(input: updateMissionInput): updateMissionPayload
  deleteMission(input: deleteMissionInput): deleteMissionPayload
  createService(input: createServiceInput): createServicePayload
  updateService(input: updateServiceInput): updateServicePayload
  deleteService(input: deleteServiceInput): deleteServicePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UserInput!): UsersPermissionsLoginPayload!
}

type Query {
  about(id: ID!): About
  abouts(sort: String, limit: Int, start: Int, where: JSON): [About]
  client(id: ID!): Client
  clients(sort: String, limit: Int, start: Int, where: JSON): [Client]
  mission(id: ID!): Mission
  missions(sort: String, limit: Int, start: Int, where: JSON): [Mission]
  service(id: ID!): Service
  services(sort: String, limit: Int, start: Int, where: JSON): [Service]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Service {
  title: String
  description: String
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input ServiceInput {
  title: String
  description: String
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateAboutInput {
  where: InputID
  data: editAboutInput
}

type updateAboutPayload {
  about: About
}

input updateClientInput {
  where: InputID
  data: editClientInput
}

type updateClientPayload {
  client: Client
}

input updateMissionInput {
  where: InputID
  data: editMissionInput
}

type updateMissionPayload {
  mission: Mission
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateServiceInput {
  where: InputID
  data: editServiceInput
}

type updateServicePayload {
  service: Service
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  id: ID!
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  id: ID!
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}
